# vim: syntax=python


# For GATK tools: 
rule make_bam_arg_file:
    input:
        bams=config['bam_map'].values()
    output:
        listfile="gatk/arg_file_bams.list"
    resources:
        mem_mb=100
    localrule: True
    run:
        with open(output.listfile, 'w') as f:
            for bam in input.bams:
                f.write("-I " + str(bam) + '\n')


# When many analysis regions are supplied, putting them all onto the command
# line may exceed the max command line length.  So print them into a file for
# tools that accept a file list.
rule make_vcf_arg_file:
    input:
        vcfs=lambda wildcards:
                expand("gatk/hc_raw.mmq{{gatk_mmq}}.region_{analysis_region}.vcf",
                       analysis_region=config['analysis_regions'])
    output:
        listfile="gatk/concat_mmq{gatk_mmq}_args.list"
    resources:
        mem_mb=100
    localrule: True
    run:
        with open(output.listfile, 'w') as f:
            for vcf in input.vcfs:
                f.write(str(vcf) + '\n')


rule gatk_gather:
    input:
        listfile="gatk/concat_mmq{gatk_mmq}_args.list",
        # these VCFs can be temp()ed, so must specify here to not be deleted
        # after listfile is made
        vcfs=lambda wildcards:
                expand("gatk/hc_raw.mmq{{gatk_mmq}}.region_{analysis_region}.vcf",
                       analysis_region=config['analysis_regions'])
    output:
        bcf="gatk/hc_raw.mmq{gatk_mmq}.bcf",
        bcfidx="gatk/hc_raw.mmq{gatk_mmq}.bcf.csi"
    log:
        "gatk/gatk_gather.mmq{gatk_mmq}.log"
    benchmark:
        "gatk/gatk_gather.mmq{gatk_mmq}.benchmark.tsv"
    resources:
        mem_mb=2000
    threads: 1
    shell:
        """
        bcftools concat \
            --file-list {input.listfile} \
            -Ob -o {output.bcf}
        bcftools index {output.bcf} --output {output.bcfidx}
        """
