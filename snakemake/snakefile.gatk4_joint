# vim: syntax=python

rule gatk_scatter:
    input:
        argfile="gatk/arg_file_bams.list",
        dbsnp=config['dbsnp'],
        ref=config['ref']
    output:
        vcf=temp("gatk/hc_raw.mmq{gatk_mmq}.region_{analysis_region}.vcf"),
        vcfidx=temp("gatk/hc_raw.mmq{gatk_mmq}.region_{analysis_region}.vcf.idx")
    log:
        "gatk/hc_raw.mmq{gatk_mmq}.region_{analysis_region}.log"
    benchmark:
        "gatk/scatter_benchmark.mmq{gatk_mmq}.region_{analysis_region}.tsv"
    params:
        min_base_quality_score=config['min_base_quality_score']
    resources:
        # Warning: mem_mb must be >2500 (and in reality at least double that) since
        # the first 2500M is allocated to non-heap memory.
        # This memory usage is not well-tuned like the sentieon module. DO NOT ATTEMPT
        # to tune this. In an example where 99% of jobs had RSS < 5G, supplying mem_mb=5000
        # failed almost all of the time due to lack of memory. 
        mem_mb=lambda wildcards, input, threads, attempt: 7000 + (attempt-1)*25000
    shell:
        """
        gatk HaplotypeCaller \
            --java-options "-Xmx$(({resources.mem_mb} - 2000))M" \
            --arguments_file {input.argfile} \
            --dont-use-soft-clipped-bases \
            --dbsnp {input.dbsnp} \
            --minimum-mapping-quality {wildcards.gatk_mmq} \
            --min-base-quality-score {params.min_base_quality_score} \
            --emit-ref-confidence NONE \
            -L {wildcards.analysis_region} \
            -R {input.ref} \
            -O {output.vcf} >& {log}
        """
