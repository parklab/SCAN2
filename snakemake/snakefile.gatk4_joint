# vim: syntax=python

rule gatk_scatter:
    input:
        argfile="gatk/arg_file_bams.list"
    output:
        vcf=temp("gatk/hc_raw.mmq{gatk_mmq}.region_{analysis_region}.vcf"),
        vcfidx=temp("gatk/hc_raw.mmq{gatk_mmq}.region_{analysis_region}.vcf.idx")
    log:
        "gatk/hc_raw.mmq{gatk_mmq}.region_{analysis_region}.log"
    benchmark:
        "gatk/scatter_benchmark.mmq{gatk_mmq}.region_{analysis_region}.tsv"
    params:
        regionflag="-L {analysis_region}",
        mmq="{gatk_mmq}",
        # allocate half of the memory to stack, half to heap
        # it seems some JVMs allocate this memory immediately, whether used by
        # the program or not. so we subtract 1000MB (500 from stack and heap
        # each) from the total to ensure that the job isn't immediately killed
        # by the cluster scheduler.
        memreq=lambda wildcards, input, output, threads, resources: str(int(resources.mem_mb/2) - 500) + "M"
    resources:
        mem_mb=lambda wildcards, input, threads, attempt: 5000 + (attempt-1)*10000
    shell:
        """
        gatk HaplotypeCaller \
            --java-options '-Xmx{params.memreq} -Xms{params.memreq}' \
            --arguments_file {input.argfile} \
            --dont-use-soft-clipped-bases \
            --dbsnp {config[dbsnp]} \
            --minimum-mapping-quality {params.mmq} \
            --min-base-quality-score {config[min_base_quality_score]} \
            --emit-ref-confidence NONE \
            {params.regionflag} \
            -R {config[ref]} \
            -O {output.vcf} >& {log}
        """
